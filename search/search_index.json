{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynajax","text":"<p>Welcome to <code>pynajax</code>, a GPU accelerated backend for <code>pynapple</code> built on top on <code>JAX</code>.</p> <p>The package is under active development and more methods will be added in the future.</p> <p>For this package to work, <code>pynapple</code> must be installed from the branch <code>pynajax</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>Run the following <code>pip</code> command in your virtual environment.</p> <p>For macOS/Linux users: <pre><code>pip install git+https://github.com/pynapple-org/pynajax.git\n</code></pre></p> <p>For Windows users: <pre><code>python -m pip install git+https://github.com/pynapple-org/pynajax.git\n</code></pre></p>"},{"location":"#basic-usage","title":"Basic usage","text":"<p>To use pynajax, you need to change the pynapple backend using <code>nap.nap_config.set_backend</code>. See the example below : </p> <pre><code>import pynapple as nap\nimport numpy as np\nnap.nap_config.set_backend(\"jax\")\n\ntsd = nap.Tsd(t=np.arange(100), d=np.random.randn(100))\n\ntsd.convolve(np.ones(11)) # This will run on GPU or CPU depending on the jax installation\n</code></pre>"},{"location":"#benchmarks","title":"Benchmarks","text":"<p>This benchmark for the <code>convolve</code> function was run on a NVIDIA GeForce GTX 1060.</p> <p></p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Please note that this package is currently under development. While you can download and test the functionalities that are already present, please be aware that syntax and functionality may change before our preliminary release.</p>"},{"location":"generated/gallery/","title":"Tutorials","text":""},{"location":"generated/gallery/#examples","title":"Examples","text":"<p>A gallery of tutorialgis on the current <code>pynajax</code> functionalities.</p> <p> Download all examples in Python source code: gallery_python.zip</p> <p> Download all examples in Jupyter notebooks: gallery_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"reference/SUMMARY/","title":"Code References","text":"<ul> <li>pynajax<ul> <li>jax_core</li> </ul> </li> </ul>"},{"location":"reference/pynajax/jax_core/","title":"Pynajax","text":"<p>Vectorized one-dimensional convolution.</p>"},{"location":"reference/pynajax/jax_core/#pynajax.jax_core.construct_nap","title":"<code>construct_nap(time, data, time_support, columns)</code>","text":"<p>Construct a pynapple timeseries object.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>ndarray</code> <p>Array of time values.</p> required <code>data</code> <code>ndarray</code> <p>Array of data values.</p> required <code>time_support</code> <code>IntervalSet</code> <p>Index representing the time support.</p> required <code>columns</code> <code>list or None</code> <p>List of column names.</p> required <p>Returns:</p> Type Description <code>(Tsd, TsdFrame, TsdTensor)</code> <p>The constructed pynapple timeseries object.</p> Source code in <code>src/pynajax/jax_core.py</code> <pre><code>def construct_nap(time, data, time_support, columns):\n    \"\"\"\n    Construct a pynapple timeseries object.\n\n    Parameters\n    ----------\n    time : numpy.ndarray\n        Array of time values.\n    data : numpy.ndarray\n        Array of data values.\n    time_support : pynapple.IntervalSet\n        Index representing the time support.\n    columns : list or None\n        List of column names.\n\n    Returns\n    -------\n    : pynapple.Tsd, pynapple.TsdFrame, pynapple.TsdTensor\n        The constructed pynapple timeseries object.\n    \"\"\"\n    if data.ndim == 1:\n        data = nap.Tsd(t=time, d=data, time_support=time_support)\n    elif data.ndim == 2:\n        data = nap.TsdFrame(t=time, d=data, columns=columns, time_support=time_support)\n    else:\n        data = nap.TsdTensor(t=time, d=data, time_support=time_support)\n    return data\n</code></pre>"},{"location":"reference/pynajax/jax_core/#pynajax.jax_core.convolve_epoch","title":"<code>convolve_epoch(data, kernel)</code>","text":"<p>Convolve a single continuous temporal epoch.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>(Tsd, TsdFrame, TsdTensor)</code> <p>Pynapple timeseries object with data to be convolved</p> required <code>kernel</code> <code>(ndarray, ndarray)</code> <p>1-D or 2-D array with kernel(s) to be used for convolution. First dimension is assumed to be time.</p> required <p>Returns:</p> Type Description <code>(Tsd, TsdFrame, TsdTensor)</code> <p>Pynapple timeseries object with convolved data. If kernel is a 1-D array, the dimensions of the input data are retained. If kernel is a 2-D array, another (last) dimension is added to store convolution with every column of kernels.</p> Source code in <code>src/pynajax/jax_core.py</code> <pre><code>@jax.jit\ndef convolve_epoch(data, kernel):\n    \"\"\"Convolve a single continuous temporal epoch.\n\n    Parameters\n    ----------\n    data : pynapple.Tsd, pynapple.TsdFrame, pynapple.TsdTensor\n        Pynapple timeseries object with data to be convolved\n    kernel : numpy.ndarray, jax.numpy.ndarray\n        1-D or 2-D array with kernel(s) to be used for convolution.\n        First dimension is assumed to be time.\n\n    Returns\n    -------\n    pynapple.Tsd, pynapple.TsdFrame, pynapple.TsdTensor\n        Pynapple timeseries object with convolved data. If kernel is a 1-D array,\n        the dimensions of the input data are retained. If kernel is a 2-D array,\n        another (last) dimension is added to store convolution with every column of kernels.\n    \"\"\"\n    if kernel.ndim == 1:\n        data = _jit_tree_convolve_1d_kernel(data, kernel)\n    else:\n        data = _jit_tree_convolve_2d_kernel(data, kernel)\n    return data\n</code></pre>"},{"location":"reference/pynajax/jax_core/#pynajax.jax_core.convolve_intervals","title":"<code>convolve_intervals(data, kernel)</code>","text":"<p>Convolve over the first dimension.</p> <p>Convolve over the first dimension, vectorizing on every dimension of data, with every column of kernel.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>(Tsd, TsdFrame, TsdTensor)</code> <p>Pynapple timeseries object with data to be convolved</p> required <code>kernel</code> <code>(ndarray, ndarray)</code> <p>1-D or 2-D array with kernel(s) to be used for convolution. First dimension is assumed to be time.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Pynapple timeseries object with convolved data. If kernel is a 1-D array, the dimensions of the input data are retained. If kernel is a 2-D array, another (last) dimension is added to store convolution with every column of kernels.</p> Source code in <code>src/pynajax/jax_core.py</code> <pre><code>def convolve_intervals(data, kernel):\n    \"\"\"Convolve over the first dimension.\n\n    Convolve over the first dimension, vectorizing on every dimension of data,\n    with every column of kernel.\n\n    Parameters\n    ----------\n    data : pynapple.Tsd, pynapple.TsdFrame, pynapple.TsdTensor\n        Pynapple timeseries object with data to be convolved\n    kernel : numpy.ndarray, jax.numpy.ndarray\n        1-D or 2-D array with kernel(s) to be used for convolution.\n        First dimension is assumed to be time.\n\n    Returns\n    -------\n    : jax.ndarray\n        Pynapple timeseries object with convolved data. If kernel is a 1-D array,\n        the dimensions of the input data are retained. If kernel is a 2-D array,\n        another (last) dimension is added to store convolution with every column of kernels.\n    \"\"\"\n    # Create a tree of pynapple timeseries objects for each epoch\n    tree = [data.get(start, end).d for start, end in data.time_support.values]\n\n    if kernel.ndim == 1:\n        convolved_data = _jit_tree_convolve_1d_kernel(tree, kernel)\n    else:\n        convolved_data = _jit_tree_convolve_2d_kernel(tree, kernel)\n\n    return convolved_data\n</code></pre>"},{"location":"reference/pynajax/jax_core/#pynajax.jax_core.convolve","title":"<code>convolve(data, kernel)</code>","text":"<p>One-dimensional convolution.</p> Source code in <code>src/pynajax/jax_core.py</code> <pre><code>def convolve(data, kernel):\n    \"\"\"One-dimensional convolution.\"\"\"\n\n    # Perform convolution\n    if kernel.ndim == 0:\n        raise IOError(\n            \"Provide a kernel with at least 1 dimension, current kernel has 0 dimensions\"\n        )\n\n    if len(data.time_support) == 1:\n        out = convolve_epoch(data.d, kernel)\n    else:\n        out = convolve_intervals(data, kernel)\n\n    return out\n</code></pre>"}]}